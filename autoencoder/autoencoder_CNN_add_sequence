{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"autoencoder_CNN_add_sequence","version":"0.3.2","views":{},"default_view":{},"provenance":[],"collapsed_sections":[]}},"cells":[{"metadata":{"id":"P2-KuCU89Zpm","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["from keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D\n","from keras.models import Model\n","from keras.models import Sequential as sq\n","from keras import backend as K\n","\n","input_img = Input(shape=(28,28,1))\n","encoded = sq()\n","encoded.add(Conv2D(16,(3,3), activation='relu', padding='same', input_shape = (28,28,1)))\n","encoded.add(MaxPooling2D((2,2), padding='same'))\n","encoded.add(Conv2D(8,(3,3), activation='relu', padding='same'))\n","encoded.add(MaxPooling2D((2,2), padding='same'))\n","encoded.add(Conv2D(8,(3,3), activation='relu', padding = 'same'))\n","encoded.add(MaxPooling2D((2,2), padding ='same'))\n","\n","decoded = sq()\n","decoded.add(Conv2D(8, (3, 3), activation='relu', padding='same',input_shape=(4,4,8)))\n","decoded.add(UpSampling2D((2, 2)))\n","decoded.add( Conv2D(8, (3, 3), activation='relu', padding='same'))\n","decoded.add(UpSampling2D((2, 2)))\n","decoded.add(Conv2D(16, (3, 3), activation='relu'))\n","decoded.add(UpSampling2D((2, 2)))\n","decoded.add(Conv2D(1, (3, 3), activation='sigmoid', padding='same'))\n","\n","autoencoder = sq()\n","autoencoder.add(encoded)\n","autoencoder.add(decoded)\n","autoencoder.compile(optimizer='adadelta', loss='binary_crossentropy')\n","\n","from keras.datasets import mnist\n","import numpy as np\n","\n","(x_train, _), (x_test, _) = mnist.load_data()\n","\n","x_train = x_train.astype('float32') / 255.\n","x_test = x_test.astype('float32') / 255.\n","x_train = np.reshape(x_train, (len(x_train), 28, 28, 1))  # adapt this if using `channels_first` image data format\n","x_test = np.reshape(x_test, (len(x_test), 28, 28, 1))  # adapt this if using `channels_first` image data format\n","\n","from keras.callbacks import TensorBoard\n","\n","autoencoder.fit(x_train, x_train,\n","                epochs=50,\n","                batch_size=128,\n","                shuffle=True,\n","                validation_data=(x_test, x_test),\n","                callbacks=[TensorBoard(log_dir='/tmp/autoencoder')])\n","\n","\n","# use Matplotlib (don't ask)\n","import matplotlib.pyplot as plt\n","decoded_imgs = autoencoder.predict(x_test)\n","\n","n = 10\n","plt.figure(figsize=(20, 4))\n","for i in range(1,n):\n","    # display original\n","    ax = plt.subplot(2, n, i)\n","    plt.imshow(x_test[i].reshape(28, 28))\n","    plt.gray()\n","    ax.get_xaxis().set_visible(False)\n","    ax.get_yaxis().set_visible(False)\n","\n","    # display reconstruction\n","    ax = plt.subplot(2, n, i + n)\n","    plt.imshow(decoded_imgs[i].reshape(28, 28))\n","    plt.gray()\n","    ax.get_xaxis().set_visible(False)\n","    ax.get_yaxis().set_visible(False)\n","plt.show()"],"execution_count":0,"outputs":[]}]}